---
title: "Modelling Degree Distributions"
author: "Thomas Boughen"
format: 
  html: 
    page-layout: full
    toc: true
    toc-location: left
    toc-depth: 5
editor: visual
execute:
  cache: false
---

The power law often arises as a way to model the degree distribution of networks as they are assumed to be a result of a preferential attachment model that is claimed to have degree that follow the power law. However, this is only true for the bulk of the data and collapses in a lot of cases at the right tail. Here, we show the inadequacy of the power law for modelling the right tails of several data sets and introduce a new model that intends to be more accurate. This model is a mixture of a power law and a discretised variation of the Generalised Pareto distribution from extreme value theory; making it a natural distribution to try to use. One downside is the increase in the number of parameter from just one with the power law to four with this new mixture model. To see if this increase is necessary we compare it to a model that is the mixture of two power laws, that while it still has more parameters than the single power law , it does not have as many as the power law IGP mixture.

# The models

::: panel-tabset
## Power Law

### Probability Mass Function

The power law has a probability mass function as defined as:

$$
f(x) = \frac{x^{-(\alpha+1)}}{\zeta(\alpha+1)},\qquad x=1,2,\ldots
$$

where $\alpha\in\mathbb{R}^+$ and $\zeta(s) = \sum_{k=1}^\infty k^{-s}$ is the Riemann Zeta function.

This appears as a straight line on a log-log plot.

### Cumulative Mass Function and Survival

Now we can find that the survival function of this model is:

$$
S(x) = 1-\frac{\sum_{k=1}^\infty k^{-(\alpha+1)}}{\zeta(\alpha+1)}, \qquad x=1,2,\ldots
$$

### Likelihood

For a set of data $\boldsymbol{x} = (x_1, x_2, \ldots,x_N)^T$, where each $x_i$ independently follows this model, we can calculate the likelihood to be:

$$
L(\boldsymbol{x}) = \zeta(\alpha+1)^{-N}\prod_{i=1}^Nx_i^{-(\alpha+1)}
$$

## Power Law - Integrated Generalised Pareto

For this model we look to use methods from extreme value theory to model the right hand tail of the data. If we were in a continuous setting and we wanted to use a threshold model then we would likely consider using the Generalised Pareto distribution, however the degrees of nodes in a network are discrete in nature. So, we define the Integrated Generalised Pareto distribution.

### Integrated Generalised Pareto Distribution

The Generalised Pareto distribution with threshold $u\in \mathbb{R}^+$ has the survival function:

$$
G_u(h) = \left(1+\frac{\xi(h-u)}{\sigma_u}\right)^{-1/\xi}, \qquad h>u
$$

where $u,\sigma_u \in \mathbb{R}^+$ and $\xi\in\mathbb{R}$.

For this model we consider the distribution of $\lceil H\rceil$ and $\lfloor H\rfloor$, where $H|H>u\sim GP_u(\sigma_u, \xi)$. We consider both cases individually, referring to the former as type 1 and the latter as type 2.

#### Type 1

```{=tex}
\begin{align}
\Pr(X=x|X>u) &= \Pr(H>x-1|H>\lfloor u \rfloor) - \Pr(H>x|H>\lfloor u \rfloor)\\
&=\left(1+\frac{\xi(x-\lfloor u \rfloor-1)}{\sigma_{\lfloor u \rfloor}}\right)^{-1/\xi} -\left(1+\frac{\xi(x-\lfloor u \rfloor)}{\sigma_{\lfloor u \rfloor}}\right)^{-1/\xi}
\end{align}
```

## Power Law Mixture
:::

```{r,message=F, warning=F, echo=FALSE}
source('../scripts/functions.R')
```

# The data

::: panel-tabset
## CRAN

```{r, echo=F, message=F}
cran = load_data('rpkg_20190129.csv')
```

For the CRAN data we are only really interested in the in-degree of nodes i.e. the number of packages that either depend on or import each package.

::: panel-tabset
## Imports

### Summary

```{r, echo=F,warning=F, message=T}
cran.imports = cran$imports[cran$imports>1]-1
summary(cran.imports)
```

```{r, echo=F, message=F,warning=F}

par(mfrow=c(1,2))
plot(epdf2(cran.imports), log='xy')
plot(ecdf2(cran.imports),log='xy',type='l')

```

## Depends

### Summary

```{r, echo=F, warning=F}
cran.depends = cran$depends[cran$depends>1]-1
summary(cran.depends)

```

```{r, echo=F, message=F,warning=F}
par(mfrow=c(1,2))
plot(epdf2(cran.depends), log='xy')
plot(ecdf2(cran.depends),log='xy',type='l')

```
:::

## Barabasi-Albert Simulated

This data comes from a network that is generated by the Barabasi-Albert network generation algorithm.

### Summary

```{r, echo=F, warning=F}
ba.dat = degree(barabasi.game(1e4),mode='in')
ba.dat = ba.dat[ba.dat>0]
summary(ba.dat)
```

```{r, echo=F, message=FALSE, warning=F}

par(mfrow=c(1,2))
plot(epdf2(ba.dat), log='xy')
plot(ecdf2(ba.dat), log='xy', type='l')

```

## Peer to Peer

This data comes from a sample of internet peer to peer users in 2002, sourced from [SNAP](https://snap.stanford.edu/data/p2p-Gnutella08.html) . Again, we are only looking at the in-degree.

### Summary

```{r,echo=F,warning=F,message=T}
p2p.raw = read.csv('../data/p2pusers.txt', sep='\t')
p2p = as.vector(table(p2p.raw[,2]))
summary(p2p)
```

```{r, echo=F, warning=F, message=FALSE}
par(mfrow=c(1,2))
plot(epdf2(p2p), log='xy')
plot(ecdf2(p2p), log='xy', type='l')
```
:::
