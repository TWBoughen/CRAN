#acceptance
logA = min(0,zigpd.posterior(data,state.prop[1],u,state.prop[2],state.prop[3],pri.pars$alpha,pri.pars$shape,pri.pars$scale)-
zigpd.posterior(data,states[i-1,1],u,states[i-1,2],states[i-1,3],pri.pars$alpha,pri.pars$shape,pri.pars$scale))
if(log(runif(1))<logA){
states[i,] = state.prop
acc.states = rbind(acc.states,state.prop)
next
}else{
states[i,] = states[i-1,]
next
}
}
return(acc.states)
}
zigpd.mcmc = function(n.iter,data,u,init,pri.pars,prop.cov = diag(c(0.01,0.01,0.01)),H=200){
states = data.frame(alpha=numeric(n.iter+1),shape=numeric(n.iter+1),scale=numeric(n.iter+1))
states[1,] = init
cov.ls = list()
cov.ls[[1]] = prop.cov
acc.states = data.frame(alpha=numeric(),shape=numeric(),scale = numeric())
for(i in 1:n.iter+1){
message('iter: ',i,' - accepted:',nrow(acc.states))
if(nrow(acc.states)>H){
prop.cov = 2.4^2 / 3  * cov(acc.states[(nrow(acc.states)-H+1) : nrow(acc.states),])
}
cov.ls[[i]] = prop.cov
state.prop = rmvn(1,mu=states[1,],V=prop.cov)
if(state.prop[1]<0){
states[i,] = states[i-1,]
next
}
if(state.prop[3]<0){
states[i,] = states[i-1,]
next
}
#acceptance
logA = min(0,zigpd.posterior(data,state.prop[1],u,state.prop[2],state.prop[3],pri.pars$alpha,pri.pars$shape,pri.pars$scale)-
zigpd.posterior(data,states[i-1,1],u,states[i-1,2],states[i-1,3],pri.pars$alpha,pri.pars$shape,pri.pars$scale))
if(log(runif(1))<logA){
states[i,] = state.prop
acc.states = rbind(acc.states,state.prop)
next
}else{
states[i,] = states[i-1,]
next
}
}
return(acc.states)
}
mcmc.out = zigpd.mcmc(1e4,df$imports,10,c(1,1,5),list(alpha=c(4,4),shape=1,scale=c(8,2)))
?rmvn
zigpd.mcmc = function(n.iter,data,u,init,pri.pars,prop.cov = diag(c(0.01,0.01,0.01)),H=200){
states = data.frame(alpha=numeric(n.iter+1),shape=numeric(n.iter+1),scale=numeric(n.iter+1))
states[1,] = init
cov.ls = list()
cov.ls[[1]] = prop.cov
acc.states = data.frame(alpha=numeric(),shape=numeric(),scale = numeric())
for(i in 1:n.iter+1){
# message('iter: ',i,' - accepted:',nrow(acc.states))
message(prop.cov)
if(nrow(acc.states)>H){
prop.cov = 2.4^2 / 3  * cov(acc.states[(nrow(acc.states)-H+1) : nrow(acc.states),])
}
cov.ls[[i]] = prop.cov
state.prop = rmvn(1,mu=states[1,],V=prop.cov)
if(state.prop[1]<0){
states[i,] = states[i-1,]
next
}
if(state.prop[3]<0){
states[i,] = states[i-1,]
next
}
#acceptance
logA = min(0,zigpd.posterior(data,state.prop[1],u,state.prop[2],state.prop[3],pri.pars$alpha,pri.pars$shape,pri.pars$scale)-
zigpd.posterior(data,states[i-1,1],u,states[i-1,2],states[i-1,3],pri.pars$alpha,pri.pars$shape,pri.pars$scale))
if(log(runif(1))<logA){
states[i,] = state.prop
acc.states = rbind(acc.states,state.prop)
next
}else{
states[i,] = states[i-1,]
next
}
}
return(acc.states)
}
mcmc.out = zigpd.mcmc(1e4,df$imports,10,c(1,1,5),list(alpha=c(4,4),shape=1,scale=c(8,2)))
prop.cov = diag(c(0.01,0.01,0.01))
format(prop.cov)
message(format(prop.cov))
printformat(prop.cov)
print(format(prop.cov))
zigpd.mcmc = function(n.iter,data,u,init,pri.pars,prop.cov = diag(c(0.01,0.01,0.01)),H=200){
states = data.frame(alpha=numeric(n.iter+1),shape=numeric(n.iter+1),scale=numeric(n.iter+1))
states[1,] = init
cov.ls = list()
cov.ls[[1]] = prop.cov
acc.states = data.frame(alpha=numeric(),shape=numeric(),scale = numeric())
for(i in 1:n.iter+1){
# message('iter: ',i,' - accepted:',nrow(acc.states))
print(format(prop.cov))
if(nrow(acc.states)>H){
prop.cov = 2.4^2 / 3  * cov(acc.states[(nrow(acc.states)-H+1) : nrow(acc.states),])
}
cov.ls[[i]] = prop.cov
state.prop = rmvn(1,mu=states[1,],V=prop.cov)
if(state.prop[1]<0){
states[i,] = states[i-1,]
next
}
if(state.prop[3]<0){
states[i,] = states[i-1,]
next
}
#acceptance
logA = min(0,zigpd.posterior(data,state.prop[1],u,state.prop[2],state.prop[3],pri.pars$alpha,pri.pars$shape,pri.pars$scale)-
zigpd.posterior(data,states[i-1,1],u,states[i-1,2],states[i-1,3],pri.pars$alpha,pri.pars$shape,pri.pars$scale))
if(log(runif(1))<logA){
states[i,] = state.prop
acc.states = rbind(acc.states,state.prop)
next
}else{
states[i,] = states[i-1,]
next
}
}
return(acc.states)
}
mcmc.out = zigpd.mcmc(1e4,df$imports,10,c(1,1,5),list(alpha=c(4,4),shape=1,scale=c(8,2)))
zigpd.mcmc = function(n.iter,data,u,init,pri.pars,prop.cov = diag(c(0.01,0.01,0.01)),H=200){
states = data.frame(alpha=numeric(n.iter+1),shape=numeric(n.iter+1),scale=numeric(n.iter+1))
states[1,] = init
cov.ls = list()
cov.ls[[1]] = prop.cov
acc.states = data.frame(alpha=numeric(),shape=numeric(),scale = numeric())
for(i in 1:n.iter+1){
# message('iter: ',i,' - accepted:',nrow(acc.states))
print(i)
print(format(prop.cov))
if(nrow(acc.states)>H){
prop.cov = 2.4^2 / 3  * cov(acc.states[(nrow(acc.states)-H+1) : nrow(acc.states),])
}
cov.ls[[i]] = prop.cov
state.prop = rmvn(1,mu=states[1,],V=prop.cov)
if(state.prop[1]<0){
states[i,] = states[i-1,]
next
}
if(state.prop[3]<0){
states[i,] = states[i-1,]
next
}
#acceptance
logA = min(0,zigpd.posterior(data,state.prop[1],u,state.prop[2],state.prop[3],pri.pars$alpha,pri.pars$shape,pri.pars$scale)-
zigpd.posterior(data,states[i-1,1],u,states[i-1,2],states[i-1,3],pri.pars$alpha,pri.pars$shape,pri.pars$scale))
if(log(runif(1))<logA){
states[i,] = state.prop
acc.states = rbind(acc.states,state.prop)
next
}else{
states[i,] = states[i-1,]
next
}
}
return(acc.states)
}
mcmc.out = zigpd.mcmc(1e4,df$imports,10,c(1,1,5),list(alpha=c(4,4),shape=1,scale=c(8,2)))
zigpd.mcmc = function(n.iter,data,u,init,pri.pars,prop.cov = diag(c(0.01,0.01,0.01)),H=200){
states = data.frame(alpha=numeric(n.iter+1),shape=numeric(n.iter+1),scale=numeric(n.iter+1))
states[1,] = init
cov.ls = list()
cov.ls[[1]] = prop.cov
acc.states = data.frame(alpha=numeric(),shape=numeric(),scale = numeric())
for(i in 1:n.iter+1){
# message('iter: ',i,' - accepted:',nrow(acc.states))
print(nrow(acc.states))
print(format(prop.cov))
if(nrow(acc.states)>H){
prop.cov = 2.4^2 / 3  * cov(acc.states[(nrow(acc.states)-H+1) : nrow(acc.states),])
}
cov.ls[[i]] = prop.cov
state.prop = rmvn(1,mu=states[1,],V=prop.cov)
if(state.prop[1]<0){
states[i,] = states[i-1,]
next
}
if(state.prop[3]<0){
states[i,] = states[i-1,]
next
}
#acceptance
logA = min(0,zigpd.posterior(data,state.prop[1],u,state.prop[2],state.prop[3],pri.pars$alpha,pri.pars$shape,pri.pars$scale)-
zigpd.posterior(data,states[i-1,1],u,states[i-1,2],states[i-1,3],pri.pars$alpha,pri.pars$shape,pri.pars$scale))
if(log(runif(1))<logA){
states[i,] = state.prop
acc.states = rbind(acc.states,state.prop)
next
}else{
states[i,] = states[i-1,]
next
}
}
return(acc.states)
}
mcmc.out = zigpd.mcmc(1e4,df$imports,10,c(1,1,5),list(alpha=c(4,4),shape=1,scale=c(8,2)))
zigpd.mcmc = function(n.iter,data,u,init,pri.pars,prop.cov = diag(c(0.001,0.001,0.001)),H=200){
states = data.frame(alpha=numeric(n.iter+1),shape=numeric(n.iter+1),scale=numeric(n.iter+1))
states[1,] = init
cov.ls = list()
cov.ls[[1]] = prop.cov
acc.states = data.frame(alpha=numeric(),shape=numeric(),scale = numeric())
for(i in 1:n.iter+1){
# message('iter: ',i,' - accepted:',nrow(acc.states))
print(nrow(acc.states))
print(format(prop.cov))
if(nrow(acc.states)>H){
prop.cov = 2.4^2 / 3  * cov(acc.states[(nrow(acc.states)-H+1) : nrow(acc.states),])
}
cov.ls[[i]] = prop.cov
state.prop = rmvn(1,mu=states[1,],V=prop.cov)
if(state.prop[1]<0){
states[i,] = states[i-1,]
next
}
if(state.prop[3]<0){
states[i,] = states[i-1,]
next
}
#acceptance
logA = min(0,zigpd.posterior(data,state.prop[1],u,state.prop[2],state.prop[3],pri.pars$alpha,pri.pars$shape,pri.pars$scale)-
zigpd.posterior(data,states[i-1,1],u,states[i-1,2],states[i-1,3],pri.pars$alpha,pri.pars$shape,pri.pars$scale))
if(log(runif(1))<logA){
states[i,] = state.prop
acc.states = rbind(acc.states,state.prop)
next
}else{
states[i,] = states[i-1,]
next
}
}
return(acc.states)
}
mcmc.out = zigpd.mcmc(1e4,df$imports,10,c(1,1,5),list(alpha=c(4,4),shape=1,scale=c(8,2)))
mcmc.out = zigpd.mcmc(1e4,df$imports,10,c(1,1,5),list(alpha=c(4,4),shape=1,scale=c(8,2)))
zigpd.mcmc = function(n.iter,data,u,init,pri.pars,prop.cov = diag(c(0.001,0.001,0.001)),H=200){
states = data.frame(alpha=numeric(n.iter+1),shape=numeric(n.iter+1),scale=numeric(n.iter+1))
states[1,] = init
cov.ls = list()
cov.ls[[1]] = prop.cov
acc.states = data.frame(alpha=numeric(),shape=numeric(),scale = numeric())
for(i in 1:n.iter+1){
message('iter: ',i,' - accepted:',nrow(acc.states))
print(format(prop.cov))
if(nrow(acc.states)>H){
prop.cov = 2.4^2 / 3  * cov(acc.states[(nrow(acc.states)-H+1) : nrow(acc.states),])
}
cov.ls[[i]] = prop.cov
state.prop = rmvn(1,mu=states[1,],V=prop.cov)
if(state.prop[1]<0){
states[i,] = states[i-1,]
next
}
if(state.prop[3]<0){
states[i,] = states[i-1,]
next
}
#acceptance
logA = min(0,zigpd.posterior(data,state.prop[1],u,state.prop[2],state.prop[3],pri.pars$alpha,pri.pars$shape,pri.pars$scale)-
zigpd.posterior(data,states[i-1,1],u,states[i-1,2],states[i-1,3],pri.pars$alpha,pri.pars$shape,pri.pars$scale))
if(log(runif(1))<logA){
states[i,] = state.prop
acc.states = rbind(acc.states,state.prop)
next
}else{
states[i,] = states[i-1,]
next
}
}
return(acc.states)
}
mcmc.out = zigpd.mcmc(1e4,df$imports,10,c(1,1,5),list(alpha=c(4,4),shape=1,scale=c(8,2)))
zigpd.mcmc = function(n.iter,data,u,init,pri.pars,prop.cov = diag(c(0.0001,0.0001,0.0001)),H=200){
states = data.frame(alpha=numeric(n.iter+1),shape=numeric(n.iter+1),scale=numeric(n.iter+1))
states[1,] = init
cov.ls = list()
cov.ls[[1]] = prop.cov
acc.states = data.frame(alpha=numeric(),shape=numeric(),scale = numeric())
for(i in 1:n.iter+1){
message('iter: ',i,' - accepted:',nrow(acc.states))
print(format(prop.cov))
if(nrow(acc.states)>H){
prop.cov =( 2.4^2 / 3 ) * cov(acc.states[(nrow(acc.states)-H+1) : nrow(acc.states),])
}
cov.ls[[i]] = prop.cov
state.prop = rmvn(1,mu=states[1,],V=prop.cov)
if(state.prop[1]<0){
states[i,] = states[i-1,]
next
}
if(state.prop[3]<0){
states[i,] = states[i-1,]
next
}
#acceptance
logA = min(0,zigpd.posterior(data,state.prop[1],u,state.prop[2],state.prop[3],pri.pars$alpha,pri.pars$shape,pri.pars$scale)-
zigpd.posterior(data,states[i-1,1],u,states[i-1,2],states[i-1,3],pri.pars$alpha,pri.pars$shape,pri.pars$scale))
if(log(runif(1))<logA){
states[i,] = state.prop
acc.states = rbind(acc.states,state.prop)
next
}else{
states[i,] = states[i-1,]
next
}
}
return(acc.states)
}
mcmc.out = zigpd.mcmc(1e4,df$imports,10,c(1,1,5),list(alpha=c(4,4),shape=1,scale=c(8,2)))
mcmc.out = zigpd.mcmc(1e4,df$imports,10,c(2,3,10),list(alpha=c(4,4),shape=1,scale=c(8,2)))
zigpd.mcmc = function(n.iter,data,u,init,pri.pars,prop.cov = diag(c(0.0001,0.0001,0.0001)),H=200){
states = data.frame(alpha=numeric(n.iter+1),shape=numeric(n.iter+1),scale=numeric(n.iter+1))
states[1,] = init
cov.ls = list()
cov.ls[[1]] = prop.cov
acc.states = data.frame(alpha=numeric(),shape=numeric(),scale = numeric())
for(i in 1:n.iter+1){
message('iter: ',i,' - accepted:',nrow(acc.states))
message(states[i-1,])
print(format(prop.cov))
if(nrow(acc.states)>H){
prop.cov =( 2.4^2 / 3 ) * cov(acc.states[(nrow(acc.states)-H+1) : nrow(acc.states),])
}
cov.ls[[i]] = prop.cov
state.prop = rmvn(1,mu=states[1,],V=prop.cov)
if(state.prop[1]<0){
states[i,] = states[i-1,]
next
}
if(state.prop[3]<0){
states[i,] = states[i-1,]
next
}
#acceptance
logA = min(0,zigpd.posterior(data,state.prop[1],u,state.prop[2],state.prop[3],pri.pars$alpha,pri.pars$shape,pri.pars$scale)-
zigpd.posterior(data,states[i-1,1],u,states[i-1,2],states[i-1,3],pri.pars$alpha,pri.pars$shape,pri.pars$scale))
if(log(runif(1))<logA){
states[i,] = state.prop
acc.states = rbind(acc.states,state.prop)
next
}else{
states[i,] = states[i-1,]
next
}
}
return(acc.states)
}
mcmc.out = zigpd.mcmc(1e4,df$imports,10,c(2,3,10),list(alpha=c(4,4),shape=1,scale=c(8,2)))
zigpd.mcmc = function(n.iter,data,u,init,pri.pars,prop.cov = diag(c(0.0001,0.0001,0.0001)),H=200){
states = data.frame(alpha=numeric(n.iter+1),shape=numeric(n.iter+1),scale=numeric(n.iter+1))
states[1,] = init
cov.ls = list()
cov.ls[[1]] = prop.cov
acc.states = data.frame(alpha=numeric(),shape=numeric(),scale = numeric())
for(i in 1:n.iter+1){
message('iter: ',i,' - accepted:',nrow(acc.states))
message(round(states[i-1,],2))
print(format(prop.cov))
if(nrow(acc.states)>H){
prop.cov =( 2.4^2 / 3 ) * cov(acc.states[(nrow(acc.states)-H+1) : nrow(acc.states),])
}
cov.ls[[i]] = prop.cov
state.prop = rmvn(1,mu=states[1,],V=prop.cov)
if(state.prop[1]<0){
states[i,] = states[i-1,]
next
}
if(state.prop[3]<0){
states[i,] = states[i-1,]
next
}
#acceptance
logA = min(0,zigpd.posterior(data,state.prop[1],u,state.prop[2],state.prop[3],pri.pars$alpha,pri.pars$shape,pri.pars$scale)-
zigpd.posterior(data,states[i-1,1],u,states[i-1,2],states[i-1,3],pri.pars$alpha,pri.pars$shape,pri.pars$scale))
if(log(runif(1))<logA){
states[i,] = state.prop
acc.states = rbind(acc.states,state.prop)
next
}else{
states[i,] = states[i-1,]
next
}
}
return(acc.states)
}
mcmc.out = zigpd.mcmc(1e4,df$imports,10,c(2,3,10),list(alpha=c(4,4),shape=1,scale=c(8,2)))
zigpd.mcmc = function(n.iter,data,u,init,pri.pars,prop.cov = diag(c(0.0001,0.0001,0.0001)),H=200){
states = data.frame(alpha=numeric(n.iter+1),shape=numeric(n.iter+1),scale=numeric(n.iter+1))
states[1,] = init
cov.ls = list()
cov.ls[[1]] = prop.cov
acc.states = data.frame(alpha=numeric(),shape=numeric(),scale = numeric())
for(i in 1:n.iter+1){
message('iter: ',i,' - accepted:',nrow(acc.states))
print(format(round(states[i-1,],2)))
print(format(prop.cov))
if(nrow(acc.states)>H){
prop.cov =( 2.4^2 / 3 ) * cov(acc.states[(nrow(acc.states)-H+1) : nrow(acc.states),])
}
cov.ls[[i]] = prop.cov
state.prop = rmvn(1,mu=states[1,],V=prop.cov)
if(state.prop[1]<0){
states[i,] = states[i-1,]
next
}
if(state.prop[3]<0){
states[i,] = states[i-1,]
next
}
#acceptance
logA = min(0,zigpd.posterior(data,state.prop[1],u,state.prop[2],state.prop[3],pri.pars$alpha,pri.pars$shape,pri.pars$scale)-
zigpd.posterior(data,states[i-1,1],u,states[i-1,2],states[i-1,3],pri.pars$alpha,pri.pars$shape,pri.pars$scale))
if(log(runif(1))<logA){
states[i,] = state.prop
acc.states = rbind(acc.states,state.prop)
next
}else{
states[i,] = states[i-1,]
next
}
}
return(acc.states)
}
mcmc.out = zigpd.mcmc(1e4,df$imports,10,c(2,3,10),list(alpha=c(4,4),shape=1,scale=c(8,2)))
zigpd.mcmc = function(n.iter,data,u,init,pri.pars,prop.cov = diag(c(0.0001,0.0001,0.0001)),H=200){
states = data.frame(alpha=numeric(n.iter+1),shape=numeric(n.iter+1),scale=numeric(n.iter+1))
states[1,] = init
cov.ls = list()
cov.ls[[1]] = prop.cov
acc.states = data.frame(alpha=numeric(),shape=numeric(),scale = numeric())
for(i in 1:n.iter+1){
message('iter: ',i,' - accepted:',nrow(acc.states))
print(format(round(state.prop,2)))
print(format(prop.cov))
if(nrow(acc.states)>H){
prop.cov =( 2.4^2 / 3 ) * cov(acc.states[(nrow(acc.states)-H+1) : nrow(acc.states),])
}
cov.ls[[i]] = prop.cov
state.prop = rmvn(1,mu=states[1,],V=prop.cov)
if(state.prop[1]<0){
states[i,] = states[i-1,]
next
}
if(state.prop[3]<0){
states[i,] = states[i-1,]
next
}
#acceptance
logA = min(0,zigpd.posterior(data,state.prop[1],u,state.prop[2],state.prop[3],pri.pars$alpha,pri.pars$shape,pri.pars$scale)-
zigpd.posterior(data,states[i-1,1],u,states[i-1,2],states[i-1,3],pri.pars$alpha,pri.pars$shape,pri.pars$scale))
if(log(runif(1))<logA){
states[i,] = state.prop
acc.states = rbind(acc.states,state.prop)
next
}else{
states[i,] = states[i-1,]
next
}
}
return(acc.states)
}
mcmc.out = zigpd.mcmc(1e4,df$imports,10,c(2,3,10),list(alpha=c(4,4),shape=1,scale=c(8,2)))
state.prop=c(0,0,0)
zigpd.mcmc = function(n.iter,data,u,init,pri.pars,prop.cov = diag(c(0.0001,0.0001,0.0001)),H=200){
states = data.frame(alpha=numeric(n.iter+1),shape=numeric(n.iter+1),scale=numeric(n.iter+1))
states[1,] = init
cov.ls = list()
cov.ls[[1]] = prop.cov
acc.states = data.frame(alpha=numeric(),shape=numeric(),scale = numeric())
state.prop=c(0,0,0)
for(i in 1:n.iter+1){
message('iter: ',i,' - accepted:',nrow(acc.states))
print(format(round(state.prop,2)))
print(format(prop.cov))
if(nrow(acc.states)>H){
prop.cov =( 2.4^2 / 3 ) * cov(acc.states[(nrow(acc.states)-H+1) : nrow(acc.states),])
}
cov.ls[[i]] = prop.cov
state.prop = rmvn(1,mu=states[1,],V=prop.cov)
if(state.prop[1]<0){
states[i,] = states[i-1,]
next
}
if(state.prop[3]<0){
states[i,] = states[i-1,]
next
}
#acceptance
logA = min(0,zigpd.posterior(data,state.prop[1],u,state.prop[2],state.prop[3],pri.pars$alpha,pri.pars$shape,pri.pars$scale)-
zigpd.posterior(data,states[i-1,1],u,states[i-1,2],states[i-1,3],pri.pars$alpha,pri.pars$shape,pri.pars$scale))
if(log(runif(1))<logA){
states[i,] = state.prop
acc.states = rbind(acc.states,state.prop)
next
}else{
states[i,] = states[i-1,]
next
}
}
return(acc.states)
}
mcmc.out = zigpd.mcmc(1e4,df$imports,10,c(2,3,10),list(alpha=c(4,4),shape=1,scale=c(8,2)))
